from estado import AppState
from categoricos.estrategias_categoricas.one_hot_encoding import OneHotEncoding
from categoricos.estrategias_categoricas.label_encoding import LabelEncoding


def mostrar_submenu_transformacion_categorica(estado: AppState):
    """
    Muestra el submen√∫ de transformaci√≥n de datos categ√≥ricos.

    Esta funci√≥n gestiona la interacci√≥n con el usuario para aplicar una estrategia
    de transformaci√≥n sobre columnas categ√≥ricas de las variables de entrada.
    Permite seleccionar entre One-Hot Encoding y Label Encoding, aplicando la
    transformaci√≥n elegida solo si se han seleccionado columnas y se han manejado
    previamente los valores nulos. Tambi√©n actualiza el estado de las columnas
    codificadas y las nuevas features generadas.

    Par√°metros:
    - estado (AppState): Objeto que contiene el estado actual del pipeline,
      incluyendo los datos cargados, columnas seleccionadas y configuraciones.
    """

    if not estado.columnas_seleccionadas() or not estado.faltantes_manejados:
        print("‚ùå Error: Debe seleccionar columnas y manejar nulos antes de transformar.")
        return

    df = estado.datos
    columnas_categoricas = [col for col in estado.features if df[col].dtype ==
                            "object" or df[col].dtype.name == "category"]
    print("\n=============================")
    print("Transformaci√≥n de Datos Categ√≥ricos")
    print("=============================")

    if not columnas_categoricas:
        print("‚úÖ No se han detectado columnas categ√≥ricas en las variables de entrada seleccionadas.")
        estado.transformacion_categorica = True
        return

    print("Se han detectado columnas categ√≥ricas en las variables seleccionadas:")
    for col in columnas_categoricas:
        print(f"  - {col}")

    estrategia = None
    transformacion = True
    while transformacion:
        print("\nSeleccione una estrategia de transformaci√≥n:")
        print("  [1] One-Hot Encoding")
        print("  [2] Label Encoding")
        print("  [3] Volver al men√∫ principal")
        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
            estrategia = OneHotEncoding()
        elif opcion == "2":
            estrategia = LabelEncoding()
        elif opcion == "3":
            transformacion = False
        else:
            print("Opci√≥n inv√°lida.")
            continue

        if estrategia is not None:
            try:
                # Filtrar las columnas categ√≥ricas que necesitan transformaci√≥n
                columnas_categoricas_filtradas = []

                # Si la estrategia es One-Hot Encoding, pedimos confirmaci√≥n para las columnas con m√°s de 40 valores √∫nicos
                if isinstance(estrategia, OneHotEncoding):
                    for col in columnas_categoricas:
                        n_unicos = df[col].nunique()
                        if n_unicos > 40:
                            print(
                                f"\n‚ö†Ô∏è  Atenci√≥n: La columna '{col}' tiene {n_unicos} valores √∫nicos.")
                            print(
                                "   El One-Hot Encoding podr√≠a crear muchas columnas adicionales, lo cual complicar√≠a los siguientes pasos.")
                            decision = input(
                                f"¬øDesea incluir '{col}' en la transformaci√≥n? (s/n): ").strip().lower()
                            if decision == "s":
                                columnas_categoricas_filtradas.append(col)
                            else:
                                print(
                                    f"üîµ '{col}' ser√° excluida de la transformaci√≥n.")
                        else:
                            columnas_categoricas_filtradas.append(col)

                # Si la estrategia es Label Encoding, no necesitamos la confirmaci√≥n para las columnas
                elif isinstance(estrategia, LabelEncoding):
                    # Aplicamos Label Encoding a todas las categ√≥ricas sin excepci√≥n
                    columnas_categoricas_filtradas = columnas_categoricas
                    # Guardamos columnas codificadas (sobreescritas)
                    estado.columnas_codificadas = columnas_categoricas_filtradas

                # Aplicar la estrategia de transformaci√≥n elegida
                estado.datos = estrategia.transformar(
                    df, columnas_categoricas_filtradas)

                # Actualizar las features despu√©s de la transformaci√≥n
                columnas_actuales = set(estado.datos.columns)
                columnas_originales = set(df.columns)
                nuevas_columnas = columnas_actuales - columnas_originales

                # Mantener las columnas num√©ricas o no categ√≥ricas que ya eran features
                columnas_no_categoricas = [
                    col for col in estado.features if col not in columnas_categoricas]

                # Actualizamos las features con las nuevas columnas generadas por One-Hot Encoding (si aplica)
                estado.features = columnas_no_categoricas + \
                    list(nuevas_columnas)

                # Detectar y guardar las columnas binarias generadas por One-Hot Encoding, para no visualizarlas mas tarde
                columnas_binarias = [
                    col for col in nuevas_columnas
                    if set(estado.datos[col].unique()) <= {0, 1}
                ]
                estado.columnas_binarias = columnas_binarias

                estado.transformacion_categorica = True
                print("‚úÖ Transformaci√≥n completada con √©xito.\n")

            except Exception as e:
                print(f"‚ùå Error al aplicar la transformaci√≥n: {e}")
            break
